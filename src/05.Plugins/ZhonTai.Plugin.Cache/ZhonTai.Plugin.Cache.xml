<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZhonTai.Plugin.Cache</name>
    </assembly>
    <members>
        <member name="T:ZhonTai.Plugin.Cache.CacheConfig">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="P:ZhonTai.Plugin.Cache.CacheConfig.Type">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="P:ZhonTai.Plugin.Cache.CacheConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="T:ZhonTai.Plugin.Cache.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:ZhonTai.Plugin.Cache.CacheType.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:ZhonTai.Plugin.Cache.CacheType.Redis">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="T:ZhonTai.Plugin.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.DelByPatternAsync(System.String)">
            <summary>
            用于在 key 模板存在时删除
            </summary>
            <param name="pattern">key模板</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.Set(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
            <returns></returns>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.ICache.GetOrSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            获取或设置缓存
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <param name="func">获取数据的方法</param>
            <param name="expire">有效期</param>
            <returns></returns>
        </member>
        <member name="T:ZhonTai.Plugin.Cache.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.MemoryCache.PatternRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:ZhonTai.Plugin.Cache.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="M:ZhonTai.Plugin.Cache.RedisCache.PatternRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PatternRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PatternRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PatternRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PatternRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PatternRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PatternRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PatternRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PatternRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PatternRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PatternRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
